{"ast":null,"code":"var _jsxFileName = \"/Users/jamestucker/Personal Projects/teach_yourself_code/components/SignInScreen.jsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport firebase from \"firebase\"; // Configure Firebase.\n\nconst config = {\n  apiKey: \"AIzaSyAKfflzr482_jI6-kogqdGl_g7E368lfXQ\",\n  authDomain: \"teach-yourself-code.firebaseapp.com\",\n  databaseURL: \"https://teach-yourself-code.firebaseio.com\",\n  projectId: \"teach-yourself-code\",\n  storageBucket: \"teach-yourself-code.appspot.com\",\n  messagingSenderId: \"681808673288\",\n  appId: \"1:681808673288:web:a7ee723223e69862642fbd\",\n  measurementId: \"G-JZV45JRTL1\"\n};\nfirebase.initializeApp(config); // Configure FirebaseUI.\n\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: \"popup\",\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: \"/signedIn\",\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.FacebookAuthProvider.PROVIDER_ID]\n};\n\nclass SignInScreen extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isSignedIn: false // Local signed-in state.\n\n    });\n\n    _defineProperty(this, \"uiConfig\", {\n      // Popup signin flow rather than redirect flow.\n      signInFlow: \"popup\",\n      // We will display Google and Facebook as auth providers.\n      signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.FacebookAuthProvider.PROVIDER_ID],\n      callbacks: {\n        // Avoid redirects after sign-in.\n        signInSuccessWithAuthResult: () => false\n      }\n    });\n  }\n\n  // Listen to the Firebase Auth state and set the local state.\n  componentDidMount() {\n    this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(user => this.setState({\n      isSignedIn: !!user\n    }));\n  } // Make sure we un-register Firebase observers when the component unmounts.\n\n\n  componentWillUnmount() {\n    this.unregisterAuthObserver();\n  }\n\n  render() {\n    if (!this.state.isSignedIn) {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"My App\"), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Please sign-in:\"), __jsx(StyledFirebaseAuth, {\n        uiConfig: this.uiConfig,\n        firebaseAuth: firebase.auth(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }));\n    }\n\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"My App\"), __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Welcome \", firebase.auth().currentUser.displayName, \"! You are now signed-in!\"), __jsx(\"a\", {\n      onClick: () => firebase.auth().signOut(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Sign-out\"));\n  }\n\n}\n\nexport default SignInScreen;","map":{"version":3,"sources":["/Users/jamestucker/Personal Projects/teach_yourself_code/components/SignInScreen.jsx"],"names":["React","StyledFirebaseAuth","firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","uiConfig","signInFlow","signInSuccessUrl","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","SignInScreen","Component","isSignedIn","callbacks","signInSuccessWithAuthResult","componentDidMount","unregisterAuthObserver","onAuthStateChanged","user","setState","componentWillUnmount","render","state","currentUser","displayName","signOut"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,qCAFC;AAGbC,EAAAA,WAAW,EAAE,4CAHA;AAIbC,EAAAA,SAAS,EAAE,qBAJE;AAKbC,EAAAA,aAAa,EAAE,iCALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWAT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB,E,CAEA;;AACA,MAAMU,QAAQ,GAAG;AACf;AACAC,EAAAA,UAAU,EAAE,OAFG;AAGf;AACAC,EAAAA,gBAAgB,EAAE,WAJH;AAKf;AACAC,EAAAA,aAAa,EAAE,CACbd,QAAQ,CAACe,IAAT,CAAcC,kBAAd,CAAiCC,WADpB,EAEbjB,QAAQ,CAACe,IAAT,CAAcG,oBAAd,CAAmCD,WAFtB;AANA,CAAjB;;AAYA,MAAME,YAAN,SAA2BrB,KAAK,CAACsB,SAAjC,CAA2C;AAAA;AAAA;;AAAA,mCAEjC;AACNC,MAAAA,UAAU,EAAE,KADN,CACY;;AADZ,KAFiC;;AAAA,sCAO9B;AACT;AACAT,MAAAA,UAAU,EAAE,OAFH;AAGT;AACAE,MAAAA,aAAa,EAAE,CACbd,QAAQ,CAACe,IAAT,CAAcC,kBAAd,CAAiCC,WADpB,EAEbjB,QAAQ,CAACe,IAAT,CAAcG,oBAAd,CAAmCD,WAFtB,CAJN;AAQTK,MAAAA,SAAS,EAAE;AACT;AACAC,QAAAA,2BAA2B,EAAE,MAAM;AAF1B;AARF,KAP8B;AAAA;;AAqBzC;AACAC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,sBAAL,GAA8BzB,QAAQ,CACnCe,IAD2B,GAE3BW,kBAF2B,CAERC,IAAI,IAAI,KAAKC,QAAL,CAAc;AAAEP,MAAAA,UAAU,EAAE,CAAC,CAACM;AAAhB,KAAd,CAFA,CAA9B;AAGD,GA1BwC,CA4BzC;;;AACAE,EAAAA,oBAAoB,GAAG;AACrB,SAAKJ,sBAAL;AACD;;AAEDK,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKC,KAAL,CAAWV,UAAhB,EAA4B;AAC1B,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,EAGE,MAAC,kBAAD;AACE,QAAA,QAAQ,EAAE,KAAKV,QADjB;AAEE,QAAA,YAAY,EAAEX,QAAQ,CAACe,IAAT,EAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF;AAUD;;AACD,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACWf,QAAQ,CAACe,IAAT,GAAgBiB,WAAhB,CAA4BC,WADvC,6BAFF,EAME;AAAG,MAAA,OAAO,EAAE,MAAMjC,QAAQ,CAACe,IAAT,GAAgBmB,OAAhB,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF,CADF;AAUD;;AAxDwC;;AA2D3C,eAAef,YAAf","sourcesContent":["import React from \"react\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport firebase from \"firebase\";\n\n// Configure Firebase.\nconst config = {\n  apiKey: \"AIzaSyAKfflzr482_jI6-kogqdGl_g7E368lfXQ\",\n  authDomain: \"teach-yourself-code.firebaseapp.com\",\n  databaseURL: \"https://teach-yourself-code.firebaseio.com\",\n  projectId: \"teach-yourself-code\",\n  storageBucket: \"teach-yourself-code.appspot.com\",\n  messagingSenderId: \"681808673288\",\n  appId: \"1:681808673288:web:a7ee723223e69862642fbd\",\n  measurementId: \"G-JZV45JRTL1\"\n};\n\nfirebase.initializeApp(config);\n\n// Configure FirebaseUI.\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: \"popup\",\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: \"/signedIn\",\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    firebase.auth.FacebookAuthProvider.PROVIDER_ID\n  ]\n};\n\nclass SignInScreen extends React.Component {\n  // The component's Local state.\n  state = {\n    isSignedIn: false // Local signed-in state.\n  };\n\n  // Configure FirebaseUI.\n  uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: \"popup\",\n    // We will display Google and Facebook as auth providers.\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.FacebookAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n      // Avoid redirects after sign-in.\n      signInSuccessWithAuthResult: () => false\n    }\n  };\n\n  // Listen to the Firebase Auth state and set the local state.\n  componentDidMount() {\n    this.unregisterAuthObserver = firebase\n      .auth()\n      .onAuthStateChanged(user => this.setState({ isSignedIn: !!user }));\n  }\n\n  // Make sure we un-register Firebase observers when the component unmounts.\n  componentWillUnmount() {\n    this.unregisterAuthObserver();\n  }\n\n  render() {\n    if (!this.state.isSignedIn) {\n      return (\n        <div>\n          <h1>My App</h1>\n          <p>Please sign-in:</p>\n          <StyledFirebaseAuth\n            uiConfig={this.uiConfig}\n            firebaseAuth={firebase.auth()}\n          />\n        </div>\n      );\n    }\n    return (\n      <div>\n        <h1>My App</h1>\n        <p>\n          Welcome {firebase.auth().currentUser.displayName}! You are now\n          signed-in!\n        </p>\n        <a onClick={() => firebase.auth().signOut()}>Sign-out</a>\n      </div>\n    );\n  }\n}\n\nexport default SignInScreen;\n"]},"metadata":{},"sourceType":"module"}